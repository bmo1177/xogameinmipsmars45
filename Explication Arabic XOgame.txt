هذا الكود هو لعبة تيك-توك (Tic-Tac-Toe) مكتوبة بلغة **MIPS Assembly**. اللعبة تُلعب بين لاعبين (Player 1 و Player 2)، حيث يستخدم اللاعب الأول الرمز "X" واللاعب الثاني الرمز "O". الهدف من اللعبة هو ملء الصفوف أو الأعمدة أو الأقطار بثلاثة رموز متشابهة للفوز.

### **شرح الكود بالتفصيل**:

1. **المتغيرات (Data Section)**:
    - `board`: يُمثل اللوحة المبدئية للعبة، وهي مصفوفة تحتوي على الأرقام من 1 إلى 9، وهذه الأرقام تمثل الأماكن التي يمكن للاعبين اختيارها لوضع رموزهم ("X" أو "O").
    - `prompt`: هو النص الذي يُطلب من اللاعب إدخال حركته (مثلاً: "Enter your move (1-9):").
    - `player1` و `player2`: تمثل أسماء اللاعبين (Player 1 و Player 2).
    - `win_msg`: هي الرسالة التي تُطبع عند فوز أحد اللاعبين.
    - `win_msg2`: تكملة الرسالة التي تطبع عند فوز أحد اللاعبين.
    - `draw_msg`: تطبع عند انتهاء اللعبة بالتعادل.
    - `invalid_move_msg`: تطبع عند إدخال حركة غير صالحة (مثل اختيار خانة مليئة بالفعل).
    - `newline`: تمثل حرف السطر الجديد.
    - `space`: تمثل المسافة بين الخلايا عند طباعة اللوحة.

2. **الجزء التنفيذي (Text Section)**:

    - **المتغيرات المؤقتة**:
      - `$t2`: متغير يستخدم لتحديد اللاعب الحالي (0 تعني اللاعب 1، و 1 تعني اللاعب 2).
      - `$t5`: عداد للحركات (من 0 إلى 9).
      - `$s0`: عداد خاص بالرموز "X" (لتحديد فوز اللاعب الأول).
    
    - **دورة اللعبة (game_loop)**:
      - تبدأ الحلقة بطباعة اللوحة باستخدام الدالة `print_board`.
      - بعد ذلك، يتم التحقق مما إذا كان عدد الحركات قد وصل إلى 5 "X" أو تم الوصول إلى تعادل (9 حركات).
      - إذا لم يتم الوصول إلى تعادل، يتم تحديد اللاعب الحالي وطباعة رسالة له تطلب منه إدخال الحركة.
    
    - **التحقق من الحركة (validate_move)**:
      - بعد إدخال الحركة من قبل اللاعب، يتم التحقق من صحة الإدخال. إذا كانت الحركة غير صالحة (إما الرقم خارج المدى [1-9] أو الخانة مشغولة)، يتم إظهار رسالة خطأ ويُطلب من اللاعب المحاولة مجددًا.
    
    - **تحديث اللوحة (update_board)**:
      - بعد التحقق من صحة الحركة، يتم تحديث اللوحة بإضافة الرمز ("X" أو "O") في المكان الذي اختاره اللاعب.
      - يتم زيادة عداد الحركات (`$t5`) بعد كل حركة.

    - **التحقق من الفوز (check_win)**:
      - بعد كل حركة، يتم التحقق إذا كان هناك فائز باستخدام دالة `check_win` التي تتحقق من:
        - **الصفوف**: إذا كان هناك ثلاث رموز متشابهة في صف واحد.
        - **الأعمدة**: إذا كان هناك ثلاث رموز متشابهة في عمود واحد.
        - **الأقطار**: إذا كان هناك ثلاث رموز متشابهة في القطرين.
      - إذا تم العثور على فائز، يتم طباعة رسالة فوز مع اسم اللاعب.
    
    - **التعادل (draw)**:
      - إذا تم الوصول إلى 9 حركات ولم يحدث فوز، يتم طباعة رسالة تعادل.
    
    - **التبديل بين اللاعبين**:
      - في النهاية، إذا لم يفز أي لاعب، يتم التبديل بين اللاعبين باستخدام العملية `xori $t2, $t2, 1` (تبديل 0 إلى 1 والعكس).
      - يتم العودة إلى بداية الحلقة لتكرار الدورة حتى الوصول إلى فوز أو تعادل.

3. **دالة `print_board`**:
    - تقوم هذه الدالة بطباعة اللوحة في شكل بسيط باستخدام الأرقام أو الرموز ("X" أو "O").
    - يتم طباعة كل خلية في اللوحة، ويتم إدراج سطر جديد بعد كل 3 خلايا لتمثيل الصفوف.
    
4. **دالة `check_win`**:
    - تقوم هذه الدالة بالتحقق إذا كان هناك فائز في اللعبة عن طريق:
      - **الصفوف**: تتحقق إذا كان هناك ثلاث خلايا متشابهة في أي صف.
      - **الأعمدة**: تتحقق إذا كان هناك ثلاث خلايا متشابهة في أي عمود.
      - **الأقطار**: تتحقق إذا كان هناك ثلاث خلايا متشابهة في الأقطار.
    - إذا تم العثور على فائز، تُعيد القيمة 1، وإذا لم يتم العثور على فائز، تُعيد القيمة 0.

### **ملاحظات إضافية**:

- **اللاعب الأول** يبدأ أولاً (باستخدام "X")، واللاعب الثاني يستخدم "O".
- **التحقق من الحركة** يتم عن طريق التأكد من أن الرقم الذي أدخله اللاعب بين 1 و 9 وأن الخانة المقابلة لهذا الرقم غير محجوزة.
- **التحقق من الفوز** يحدث بعد كل حركة، وإذا كان أحد اللاعبين قد فاز، يتم طباعة رسالة الفوز.
- إذا كانت اللوحة ممتلئة دون فائز، يتم إعلان التعادل.

### **في الختام**:
الكود يقوم بتطبيق منطق لعبة تيك-توك بالكامل باستخدام العمليات الأساسية في لغة **MIPS Assembly**، مثل الإدخال من المستخدم، التحقق من الحركات، تحديث اللوحة، والتحقق من الفوز.